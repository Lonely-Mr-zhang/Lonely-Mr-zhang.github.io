<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法</title>
    <url>/2020/06/10/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h4 id="多级列表"><a href="#多级列表" class="headerlink" title="多级列表"></a>多级列表</h4><ul>
<li>1<ul>
<li>1.1</li>
</ul>
</li>
<li>2<ul>
<li>2.1</li>
</ul>
</li>
</ul>
<h4 id="第二个多级列表"><a href="#第二个多级列表" class="headerlink" title="第二个多级列表"></a>第二个多级列表</h4><ul>
<li>1<ul>
<li>1.1</li>
</ul>
</li>
<li>2<pre><code>- 2.1</code></pre></li>
</ul>
<p>备注：四个空格才能实现多级列表，八个空格不能实现多级列表</p>
]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring对Bean的管理细节</title>
    <url>/2020/06/15/Spring%E5%AF%B9Bean%E7%9A%84%E7%AE%A1%E7%90%86%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h3 id="创建Bean的三种方式"><a href="#创建Bean的三种方式" class="headerlink" title="创建Bean的三种方式"></a>创建Bean的三种方式</h3><ul>
<li><p>使用默认构造函数：在Spring的配置文件中使用bean标签，配以id和class属性后且没有其他属性和标签时，采用的就是默认的构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"io.github.lonelyMrZhang.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用工厂类中的方法创建对象，并存入Spring容器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--     1、先创建工厂类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"io.github.lonelyMrZhang.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     2、再在要创建对象的bean标签中，指定要可以创建对象的工厂，及使用工厂中的那个方法进行创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用工厂中的静态方法创建对象，并存入Spring容器中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"io.github.lonelyMrZhang.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Bean对象的作用范围"><a href="#Bean对象的作用范围" class="headerlink" title="Bean对象的作用范围"></a>Bean对象的作用范围</h3><p>Spring Bean的作用范围可以通过bean标签的scope属性进行调节：</p>
<ul>
<li>scope的作用：用于指定bean的作用范围</li>
<li>scope的取值：<ul>
<li>singleton；单例的（默认值）</li>
<li>prototype：多例的</li>
<li>request：作用web应用的请求范围</li>
<li>session：作用web应用的会话范围</li>
<li>global-session：作用集群web环境的会话范围（全局会话范围），当不是集群环境时，它就是seesion，例如：<ul>
<li>1、用户登陆时由A服务器响应。响应内容包括验证码</li>
<li>2、用户之后请求其他页面时，都会携带验证码，但是之后的请求不一定是A服务器响应，可能是另一台B服务器响应，此时B服务器也知道之前用户登陆时返回的验证码，这个验证码就存储在全局 global-session中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Bean对象的生命周期"><a href="#Bean对象的生命周期" class="headerlink" title="Bean对象的生命周期"></a>Bean对象的生命周期</h3><ul>
<li><p>单例对象：</p>
<ul>
<li>出生：当容器创建时对象出生</li>
<li>存活：只要容器还在，对象一直存活</li>
<li>死亡：容器销毁，对象死亡</li>
<li>总结：单例对象的生命周期和容器相同</li>
</ul>
</li>
<li><p>多例对象：</p>
<pre><code>- 出生：当我们使用对象时，Spring为我们创建
- 存活：对象只要在使用过程中就一直活着
- 死亡：当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器回收</code></pre></li>
</ul>
<p><a href="https://github.com/Lonely-Mr-zhang/springBean" target="_blank" rel="noopener">项目GitHub地址</a></p>
<h3 id="依赖注入（Dependency-Injection）"><a href="#依赖注入（Dependency-Injection）" class="headerlink" title="依赖注入（Dependency Injection）"></a>依赖注入（Dependency Injection）</h3><p>IOC的作用：降低程序间的依赖关系（耦合）</p>
<p>依赖关系的管理：以后都交给Spring来维护在当前类需要用到其他类的对象，由Spring为我们提供，我们只需要在配置文件中说明依赖关系的维护。</p>
<p>依赖注入：依赖关系的维护，就称之为依赖注入。</p>
<blockquote>
<h2 id="Spring的两大核心"><a href="#Spring的两大核心" class="headerlink" title="Spring的两大核心"></a>Spring的两大核心</h2></blockquote>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring概述</title>
    <url>/2020/06/11/spring%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><blockquote>
<h2 id="Spring是什么？"><a href="#Spring是什么？" class="headerlink" title="Spring是什么？"></a>Spring是什么？</h2></blockquote>
<p>Spring是分层的 java SE/EE应用 全栈轻量级开源框架，以IOC（控制反转）和AOP（切面编程）为内核，提供了展现层Spring MVC 和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的java EE企业应用开源框架。<a href="https://spring.io/" target="_blank" rel="noopener">Spring官网</a></p>
<blockquote>
<h2 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h2></blockquote>
<h3 id="方便解藕、简化开发"><a href="#方便解藕、简化开发" class="headerlink" title="方便解藕、简化开发"></a>方便解藕、简化开发</h3><p>通过Spring提供的IOC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等很底层的需求编写代码，可以更专注于上层的应用开发。</p>
<h3 id="AOP编程的支持"><a href="#AOP编程的支持" class="headerlink" title="AOP编程的支持"></a>AOP编程的支持</h3><p>通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应对。</p>
<h3 id="声明式事务的支持"><a href="#声明式事务的支持" class="headerlink" title="声明式事务的支持"></a>声明式事务的支持</h3><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p>
<h3 id="方便程序的测试"><a href="#方便程序的测试" class="headerlink" title="方便程序的测试"></a>方便程序的测试</h3><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p>
<h3 id="方便集成各种优秀框架"><a href="#方便集成各种优秀框架" class="headerlink" title="方便集成各种优秀框架"></a>方便集成各种优秀框架</h3><p>Spring可以降低各种框架的使用难度，提供了对各种优秀框架的直接支持。</p>
<h3 id="降低java-EE-api的使用难度"><a href="#降低java-EE-api的使用难度" class="headerlink" title="降低java EE api的使用难度"></a>降低java EE api的使用难度</h3><p>Spring对JavaEE API（JDBC、JavaMail、远程调用等）进行了封装，使这些API的使用难度大大降低。</p>
<h3 id="源码是经典学习的案例"><a href="#源码是经典学习的案例" class="headerlink" title="源码是经典学习的案例"></a>源码是经典学习的案例</h3><p>Spring的源码设计精妙、结构清晰、匠心独用、处处体现着大师对java设计模式灵活运用以及对java技术的高深造诣，它的源码无疑是java技术的最佳实践的范例。</p>
<blockquote>
<h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2></blockquote>
<p><img src="/images/spring-overview.png" alt="Spring体系结构图" title="Spring体系结构图"></p>
<h1 id="程序的耦合及解藕"><a href="#程序的耦合及解藕" class="headerlink" title="程序的耦合及解藕"></a>程序的耦合及解藕</h1><blockquote>
<h2 id="曾经项目中的问题"><a href="#曾经项目中的问题" class="headerlink" title="曾经项目中的问题"></a>曾经项目中的问题</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lonelyMrZhang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 程序耦合事例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lonely.mr.zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/6/11 8:42 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//        1、注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">//        2、获取连接</span></span><br><span class="line">        Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://192.168.31.254:3306/coupling_code"</span>, <span class="string">"root"</span>, <span class="string">"2486"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3、获取操作数据库的预处理对象</span></span><br><span class="line">        PreparedStatement preparedStatement = con.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4、执行sql，得到结果集</span></span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//        5、遍历结果</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6、释放资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        con.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Lonely-Mr-zhang/couplingCode01" target="_blank" rel="noopener">项目GitHub地址</a></p>
<p><code>JdbcDemo1</code>类依赖<code>com.mysql.jdbc.Driver()</code>类，如果没有<code>Driver</code>的jar包，代码在编译时将会报错。</p>
<h4 id="耦合：程序间的依赖关系，包括类之间的依赖、方法间的依赖"><a href="#耦合：程序间的依赖关系，包括类之间的依赖、方法间的依赖" class="headerlink" title="耦合：程序间的依赖关系，包括类之间的依赖、方法间的依赖"></a>耦合：程序间的依赖关系，包括类之间的依赖、方法间的依赖</h4><h4 id="解藕：降低程序间的依赖关系，我们在实际开发中应该做到编译器不依赖，运行期才依赖。"><a href="#解藕：降低程序间的依赖关系，我们在实际开发中应该做到编译器不依赖，运行期才依赖。" class="headerlink" title="解藕：降低程序间的依赖关系，我们在实际开发中应该做到编译器不依赖，运行期才依赖。"></a>解藕：降低程序间的依赖关系，我们在实际开发中应该做到编译器不依赖，运行期才依赖。</h4><p>将第一步注册驱动改为下面通过反射的方式注册便可降低耦合</p>
<p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p>
<p><strong>总结：</strong> </p>
<p>1、使用反射来创建对象，避免使用new关键字<br>2、通过读取配置文件来获取要创建的对象的全限定类名</p>
<blockquote>
<h2 id="工厂模式解藕"><a href="#工厂模式解藕" class="headerlink" title="工厂模式解藕"></a>工厂模式解藕</h2><p>分析：要解藕的创建对象需要以下两步：</p>
</blockquote>
<p>1、需要一个配置文件来配置我们的service和dao，配置文件的内容：唯一标识ID=全限定类名（KV健值对）<br>2、通过读取配置文件中配置，反射创建对象</p>
<p>在代码中创建BeanFactory类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lonelyMrZhang.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 创建Bean对象的工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lonely.mr.zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/6/12 4:20 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：</span></span><br><span class="line"><span class="comment">     * Bean: 在计算机英语中有可重用组件的含义</span></span><br><span class="line"><span class="comment">     * javaBean：用java语言编写的可重用组件，javaBean &gt; 类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * BeanFactory就是用来创建service和dao对象的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 要解藕的创建对象需要以下两步：</span></span><br><span class="line"><span class="comment">     * 1、需要一个配置文件来配置我们的service和dao，配置文件的内容：唯一标识ID=全限定类名（KV健值对）</span></span><br><span class="line"><span class="comment">     * 2、通过读取配置文件中配置，反射创建对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 配置文件可以是xml也可以是properties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="comment">//初始化配置文件对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//避免使用 new File()的方式，因为文件路径不好控制</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据beanName获取Bean对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = properties.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要创建对象的地方通过BeanFactory工厂创建，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        IAccountService accountService = new AccountServiceImpl();</span></span><br><span class="line">        IAccountService accountService = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br></pre></td></tr></table></figure>
<p>通过以上方式就可降低代码间的耦合程度，当AccountServiceImpl实现类不存在时，只会产生运行时异常，而不会在编译器就出错。</p>
<p>上述方案的Bean工厂获取对象时每次都会创建一个新的实例，而在我们平时的开发过程中，service、dao对象都为单例模式模式，所以我们可以将BeanFactory设计为单例模式从而进一步优化。见链接代码。</p>
<p><a href="https://github.com/Lonely-Mr-zhang/couplingCode02" target="_blank" rel="noopener">项目GitHub地址</a></p>
<h1 id="IOC的概念"><a href="#IOC的概念" class="headerlink" title="IOC的概念"></a>IOC的概念</h1><p>IOC（控制反转）把创建对象的权利交给框架，是框架的重要特征，包括依赖注入（DI）和依赖查找（Dependency Lookup）,IOC的作用就是削减程序中的耦合。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring IOC削减耦合</title>
    <url>/2020/06/12/%E4%BD%BF%E7%94%A8Spring-IOC%E5%89%8A%E5%87%8F%E8%80%A6%E5%90%88/</url>
    <content><![CDATA[<p><a href="https://repo.spring.io/libs-release-local/org/springframework/" target="_blank" rel="noopener">Spring源码下载地址</a></p>
<blockquote>
<h2 id="Spring中基于XML的IOC环境搭建"><a href="#Spring中基于XML的IOC环境搭建" class="headerlink" title="Spring中基于XML的IOC环境搭建"></a>Spring中基于XML的IOC环境搭建</h2></blockquote>
<ol>
<li>pom.xml中引入Spring依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.在resources目录下创建配置文件bean.xml(名称可改变)<br>3.导入约束 在Spring源码中的 spring-framework-5.0.2.RELEASE/docs/spring-framework-reference/index.html中点击core，然后搜索xmlns，将搜到的约束拷贝。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、将对象的创建交给Spring管理，在bean.xml中添加如下<code>&lt;bean&gt;</code>标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;accountService&quot; class&#x3D;&quot;io.github.lonelyMrZhang.service.impl.AccountServiceImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;accountDao&quot; class&#x3D;&quot;io.github.lonelyMrZhang.dao.impl.AccountDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>5、获取Spring的IOC核心容器，并根据id获取对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lonelyMrZhang.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.lonelyMrZhang.dao.IAccountDao;</span><br><span class="line"><span class="comment">//import io.github.lonelyMrZhang.factory.BeanFactory;</span></span><br><span class="line"><span class="keyword">import</span> io.github.lonelyMrZhang.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> io.github.lonelyMrZhang.service.impl.AccountServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 模拟表现层，调用业务层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lonely.mr.zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/6/12 12:53 上午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Spring的IOC核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、获取核心容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2、根据id获取对象</span></span><br><span class="line">        IAccountService accountService = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        IAccountDao accountDao =  ac.getBean(<span class="string">"accountDao"</span>, IAccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(accountService);</span><br><span class="line">        System.out.println(accountService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="ApplicationContext-三个常用实现类之间的区别"><a href="#ApplicationContext-三个常用实现类之间的区别" class="headerlink" title="ApplicationContext 三个常用实现类之间的区别"></a>ApplicationContext 三个常用实现类之间的区别</h3><p><code>IDEA</code>中光标停留在要查看的类上 按下<code>ctrl + h</code>便可查看该类的所有实现类：</p>
<p><img src="/images/ApplicationContext%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="ApplicationContext实现类" title="ApplicationContext实现类"></p>
<ul>
<li>ClassPathXmlApplicationContext：可以加载类路径下的配置文件，要求配置文件必须在类路径下，不在类路径下加载不了。比较常用。</li>
<li>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的有权限的配置文件</li>
<li>AnnotationConfigApplicationContext：读取注解创建文件。</li>
</ul>
<h3 id="IOC容器构建的两种方式"><a href="#IOC容器构建的两种方式" class="headerlink" title="IOC容器构建的两种方式"></a>IOC容器构建的两种方式</h3><ul>
<li><p>懒汉模式<br>通过BeanFactory构建Spring容器时，采用延迟加载的策略创建对象，即：什么时候根据id获取对象，什么时候真正的创建对象。适用多例模式</p>
</li>
<li><p>饿汉模式<br>通过ApplicationContext构建Spring核心容器时，采用立即加载的策略创建对象，即：只要一读取完配置文件马上就要创建配置文件中配置的对象。适用单例模式</p>
</li>
</ul>
<p><a href="https://github.com/Lonely-Mr-zhang/springIOC" target="_blank" rel="noopener">项目GitHub地址</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
