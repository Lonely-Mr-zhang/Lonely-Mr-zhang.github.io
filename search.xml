<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cateporiesTest</title>
    <url>/2020/06/10/cateporiesTest/</url>
    <content><![CDATA[<h3 id="将-Hexo-部署到-GitHub-Pages"><a href="#将-Hexo-部署到-GitHub-Pages" class="headerlink" title="将 Hexo 部署到 GitHub Pages"></a>将 Hexo 部署到 GitHub Pages</h3><p>在本教程中，我们将会使用 Travis CI 将 Hexo 博客部署到 GitHub Pages 上。Travis CI 对于开源 repository 是免费的，但是这意味着你的站点文件将会是公开的。如果你希望你的站点文件不被公开，请直接前往本文 [私有 Repository](#私有 Repository) 部分。</p>
<p>新建一个 repository。如果你希望你的站点能通过 &lt;你的 GitHub 用户名&gt;.github.io 域名访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。<br>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 public 目录将不会被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。<br>将 Travis CI 添加到你的 GitHub 账户中。<br>前往 GitHub 的 Applications settings，配置 Travis CI 权限，使其能够访问你的 repository。<br>你应该会被重定向到 Travis CI 的页面。如果没有，请 手动前往。<br>在浏览器新建一个标签页，前往 GitHub 新建 Personal Access Token，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。<br>回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。<br>在你的 Hexo 站点文件夹中新建一个 .travis.yml 文件：<br>sudo: false<br>language: node_js<br>node_js:</p>
<ul>
<li>10 # use nodejs v10 LTS<br>cache: npm<br>branches:<br>only:<ul>
<li>master # build master branch only<br>script:</li>
</ul>
</li>
<li>hexo generate # generate static files<br>deploy:<br>provider: pages<br>skip-cleanup: true<br>github-token: $GH_TOKEN<br>keep-history: true<br>on:<br>branch: master<br>local-dir: public<br>将 .travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下<br>在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。<br>前往 https://&lt;你的 GitHub 用户名&gt;.github.io 查看你的站点是否可以访问。这可能需要一些时间。<br>Project page<br>如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。你需要检查你的 Hexo 配置文件，将 url 修改为 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、将 root 的值修改为 /&lt;repository 的名字&gt;/</li>
</ul>
<p>私有 Repository<br>下面的指示基于 一键部署 编写。</p>
<p>安装 hexo-deployer-git.</p>
<p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p>
<p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><username>/<project></p>
<h1 id="example-https-github-com-hexojs-hexojs-github-io"><a href="#example-https-github-com-hexojs-hexojs-github-io" class="headerlink" title="example, https://github.com/hexojs/hexojs.github.io"></a>example, <a href="https://github.com/hexojs/hexojs.github.io" target="_blank" rel="noopener">https://github.com/hexojs/hexojs.github.io</a></h1><p>  branch: gh-pages<br>运行 hexo clean &amp;&amp; hexo deploy 。</p>
<p>查看 username.github.io 上的网页是否部署成功。</p>
<p>有用的参考链接<br>GitHub Pages 使用文档<br>Travis CI 使用文档<br>Awesome Hexo<br>在百度上搜索 “Hexo GitHub”</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world test</title>
    <url>/2020/06/10/hello-world-test/</url>
    <content><![CDATA[<h3 id="测试了，成功了"><a href="#测试了，成功了" class="headerlink" title="测试了，成功了"></a>测试了，成功了</h3>]]></content>
      <categories>
        <category>测试1</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2020/06/10/hello-world/</url>
    <content><![CDATA[<h3 id="测试了，成功了"><a href="#测试了，成功了" class="headerlink" title="测试了，成功了"></a>测试了，成功了</h3>]]></content>
      <categories>
        <category>测试2</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
